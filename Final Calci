************************************************************************************************************************************************************************************
link for a simple angular sip calculator 

https://github.com/niharika412/sip-calculator/tree/master/src/app

************************************************************************************************************************************************************************************




Create a folder name Calculator in Desktop

Node.js terminal cmd
cd path

ng new scientific-calculator
routing y

css select
enter

cd scientific-calculator

ng generate component calculator

ng generate service add-calculator

go to vs code and open the calculator folder

app.componeet.html

<div>
  <h1>Scientific Calculator</h1>
</div>

<div>
  <app-calculator></app-calculator>
</div>

app.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'scientific-calculator';
}


app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { CalculatorComponent } from './calculator/calculator.component';
import { AddCalculatorService } from './add-calculator.service';
import { HttpClientModule } from '@angular/common/http';



@NgModule({
  declarations: [
    AppComponent,
    CalculatorComponent,
    
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule
    
  ],
  providers: [AddCalculatorService],
  bootstrap: [AppComponent]
})
export class AppModule { }




calculator.component.ts

import { Component,OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http'; 
import { AddCalculatorService } from '../add-calculator.service';


@Component({
  selector: 'app-calculator',
  templateUrl: './calculator.component.html',
  styleUrls: ['./calculator.component.css']
})
export class CalculatorComponent {
  result = '';
  input1 ='';
  input2='';
  op='';
  memory ='';


  public a:number=0;
  public b:number=0;

  constructor(private addCal: AddCalculatorService){};

  public add:number=0;

  appendToDisplay(value: string) {
    this.result += value;
  }

  addToMemory() {
    const resultNumber = parseFloat(this.result);
    if (!isNaN(resultNumber)) {
      this.memory += resultNumber;
    }
  }

  recallMemory() {
    this.result = this.memory.toString();
  }
  
  

  clearResult() {
    this.result = '';
  }
  clearBack() {
    if (this.result.length > 0) {
      this.result = this.result.slice(0, -1);
    }
  }
  

  calculateResult() {
    const matches = this.result.match(/([a-zA-Z]+)([0-9]+)/);

    if (matches) {
      this.op = matches[1]; 
      const num = matches[2];
      this.b = parseFloat(num);


    } else {
      const part=this.result.split(/([+\-*/^%!])/);
      this.input1=part[0];
      this.a=parseFloat(this.input1);

      this.op=part[1];
      if(part.length==3){
        this.input2=part[2];
        this.b=parseFloat(this.input2);

      }
    }

    switch (this.op) {
      case '+':
        this.addCal.add(this.a, this.b).subscribe((data) => {
          this.result = data.toString();
        });
        break;
      case '-':
        this.addCal.sub(this.a, this.b).subscribe((data) => {
          this.result = data.toString();
        });

        break;
      case '*':
        this.addCal.mul(this.a, this.b).subscribe((data) => {
          this.result = data.toString();
        });

        break;

      case '/':
        this.addCal.div(this.a, this.b).subscribe((data) => {
          this.result = data.toString();
        });

        break;
      case '^': 
        if(this.b==2){
          this.addCal.sqr(this.a).subscribe((data) => {
            this.result = data.toString();
          });

        }
        else if(this.b==3){
          this.addCal.cube(this.a).subscribe((data) => {
            this.result = data.toString();
          });

        }
        else if(this.b==0.5){
          this.addCal.sqrt(this.a).subscribe((data) => {
            this.result = data.toString();
          });

        }
        else if(this.b==0){
          this.result='1';
        }

        else{
          this.addCal.pow(this.a,this.b).subscribe((data) => {
            this.result = data.toString();
          });

        }

        break;

      case 'sin': 
        this.addCal.sin(this.b).subscribe((data) => {
          this.result = data.toString();
        });

        break;

      case 'cos':
      this.addCal.cos(this.b).subscribe((data) => {
        this.result = data.toString();
      });

      break;
    case 'tan':
      this.addCal.tan(this.b).subscribe((data) => {
        this.result = data.toString();
      });

      break;

    case 'log':
      this.addCal.log(this.b).subscribe((data) => {
        this.result = data.toString();
      });

      break;
  

    case 'ln':
      this.addCal.ln(this.b).subscribe((data) => {
        this.result = data.toString();
      });

      break;

    case '%':
      this.addCal.percentage(this.a, this.b).subscribe((data) => {
        this.result = data.toString();
      });

      break;
    case '!':
      this.addCal.fact(this.a).subscribe((data) => {
        this.result = data.toString();
      });

      break;

      default:
        this.result = 'Invalid operation';
    }
    }


  }


calculator.component.html

<div class="calculator">
  <input type="text" id="screen" value="{{result}}">
  <div class="calc-buttons">

      <div class="functions-one">
          <button class="button triggers" (click)="clearResult()">C</button>
          <button class="button basic-stuff">(</button>
          <button class="button basic-stuff">)</button>
          <button  (click)="appendToDisplay('7')" class="button numbers">7</button>
          <button  (click)="appendToDisplay('8')"class="button numbers">8</button>
          <button  (click)="appendToDisplay('9')"class="button numbers">9</button>
          <button  (click)="appendToDisplay('4')"class="button numbers">4</button>
          <button  (click)="appendToDisplay('5')"class="button numbers">5</button>
          <button  (click)="appendToDisplay('6')"class="button numbers">6</button>
          <button  (click)="appendToDisplay('1')"class="button numbers">1</button>
          <button  (click)="appendToDisplay('2')"class="button numbers">2</button>
          <button  (click)="appendToDisplay('3')" class="button numbers">3</button>
          <button class="button basic-stuff">±</button>
          <button  (click)="appendToDisplay('0')"class="button numbers">0</button>
          <button  (click)="appendToDisplay('.')"class="button basic-stuff">.</button>
      </div>

      <div class="functions-two">
          <button class="button triggers" (click)="clearBack()"><=</button>
          <button  (click)="appendToDisplay('%')" class="button complex-stuff">%</button>
          <button  (click)="appendToDisplay('!')"class="button complex-stuff">x !</button>
          <button  (click)="appendToDisplay('^')"class="button complex-stuff">x^</button>
          <button  (click)="appendToDisplay('*')" class="button basic-stuff">*</button>
          <button  (click)="appendToDisplay('/')"class="button basic-stuff">/</button>
          <button  (click)="appendToDisplay('ln')"class="button complex-stuff">ln</button>
          <button  (click)="appendToDisplay('2.718')"class="button complex-stuff">e</button>
          <button  (click)="appendToDisplay('+')"class="button basic-stuff">+</button>
          <button  (click)="appendToDisplay('^2')"class="button complex-stuff">x ²</button>
          <button  (click)="appendToDisplay('log')"class="button complex-stuff">log</button>
          <button  (click)="appendToDisplay('cos')"class="button complex-stuff">cos</button>
          <button  (click)="appendToDisplay('-')"class="button basic-stuff">-</button>
          <button  (click)="appendToDisplay('^0.5')"class="button complex-stuff">√</button>
          <button (click)="appendToDisplay('sin')" class="button complex-stuff">sin</button>
          <button (click)="appendToDisplay('tan')" class="button complex-stuff">tan</button>
          <button (click)="calculateResult()"class="button triggers">=</button>
          <button (click)="addToMemory()"class="button complex-stuff">M+</button>
          <button (click)="recallMemory() "class="button complex-stuff">MR</button>
          <button (click)="appendToDisplay('3.1415')"class="button complex-stuff">π</button>

      </div>
  </div>
</div> 





calculator.component.css


.calculator {
    max-width: 530px;
    background-color: beige;
    padding: 20px;
    border-radius: 10px;
    margin: 10px auto;
    text-decoration: solid;
    }
    input[type=text] {
        width: 400px;
        height: 50px;
        border-radius: 5px;
        border: 0px;
        background-color: #333333;
        color: #d9d9d9;
        padding: 0 5px 0 5px;
        margin: 10px 50px 40px 50px;
        font-size: large;
        
    }

    .calc-buttons {
        display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    
    }
    .button {
    margin: 3px;
    width: 60px;
    border: none;
    height: 30px;
    border-radius: 4px;
    color: #000000;
    cursor: pointer;
    font-size: large;
    }
    button:hover {
      background-color: hsla(180, 100%, 40%, 0.3);
      transition: .2s;
    }
    .functions-one {
        width: 210px;
        display: flex;
        flex-wrap: wrap;
        justify-content: space-evenly;
    }
    
    .functions-two {
    width: 280px;
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
    }
    .triggers {
        background-color: #ffc266;
    }
    .numbers {
        background-color: #999999;
    }
    .basic-stuff {
        background-color: #80d4ff;
    }
    
    .complex-stuff {
        background-color: #80ffff;
    }



add-calculator.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';




@Injectable({
  providedIn: 'root'
})
export class AddCalculatorService {
  private apiURL= 'https://localhost:44337/api/Calculator/api/math'; // port number is different
  constructor(private http:HttpClient) { }

 add(a: number, b: number): Observable<number> {
  return this.http.get<number>(`${this.apiURL}/add?num1=${a}&num2=${b}`);
}

mul(a: number, b: number): Observable<number> {
  return this.http.get<number>(`${this.apiURL}/multiply?num1=${a}&num2=${b}`);
}

div(a: number, b: number): Observable<number> {
  return this.http.get<number>(`${this.apiURL}/divide?num1=${a}&num2=${b}`);
}

sub(a: number, b: number): Observable<number> {
  return this.http.get<number>(`${this.apiURL}/subtract?num1=${a}&num2=${b}`);
}

sqr(a: number): Observable<number> {
  return this.http.get<number>(`${this.apiURL}/square?num=${a}`);
}
cube(a: number): Observable<number> {
  return this.http.get<number>(`${this.apiURL}/cube?num=${a}`);
}

sqrt(a: number): Observable<number> {
  return this.http.get<number>(`${this.apiURL}/square-root?num=${a}`);
}


sin(b: number): Observable<number> {
  return this.http.get<number>(`${this.apiURL}/sine?angleInDegrees=${b}`);
}
cos(b: number): Observable<number> {
  return this.http.get<number>(`${this.apiURL}/cosine?angleInDegrees=${b}`);
}
tan(b: number): Observable<number> {
  return this.http.get<number>(`${this.apiURL}/tangent?angleInDegrees=${b}`);
}
log(b: number): Observable<number> {
  return this.http.get<number>(`${this.apiURL}/log?x=${b}`);
}

ln(b: number): Observable<number> {
  return this.http.get<number>(`${this.apiURL}/ln?x=${b}`);
}

percentage(a: number, b: number): Observable<number> {
  return this.http.get<number>(`${this.apiURL}/percentage?value=${a}&percentage=${b}`);
}

pow(a: number, b: number): Observable<number> {
  return this.http.get<number>(`${this.apiURL}/power?baseValue=${a}&exponent=${b}`);
}


fact(a: number): Observable<number> {
  return this.http.get<number>(`${this.apiURL}/fact?num=${a}`);
}

}


WebAPI

CalculatorController

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Mvc;
using System;

namespace CalDemo1.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CalculatorController : ControllerBase
    {
        [HttpGet]
        [Route("api/math/add")]
        [EnableCors("AllowOrigin")]
        public double Add(double num1, double num2)
        {
            return num1 + num2;
        }

        [HttpGet]
        [Route("api/math/subtract")]
        [EnableCors("AllowOrigin")]
        public double Subtract(double num1, double num2)
        {
            return num1 - num2;
        }

        [HttpGet]
        [Route("api/math/multiply")]
        [EnableCors("AllowOrigin")]
        public double Multiply(double num1, double num2)
        {
            return num1 * num2;
        }

        [HttpGet]
        [Route("api/math/divide")]
        [EnableCors("AllowOrigin")]
        public double Divide(double num1, double num2)
        {
            if (num2 == 0)
            {
                throw new DivideByZeroException("Division by zero is not allowed.");
            }
            return num1 / num2;
        }

        [HttpGet]
        [Route("api/math/square-root")]
        [EnableCors("AllowOrigin")]
        public double SquareRoot(double num)
        {
            if (num < 0)
            {
                throw new ArgumentException("Square root of a negative number is not allowed.");
            }
            return Math.Sqrt(num);
        }
        [HttpGet]
        [Route("api/math/sine")]
        [EnableCors("AllowOrigin")]
        public double Sine(double angleInDegrees)
        {
            double angleInRadians = angleInDegrees * (Math.PI / 180.0);
            return Math.Sin(angleInRadians);
        }

        [HttpGet]
        [Route("api/math/cosine")]
        [EnableCors("AllowOrigin")]
        public double Cosine(double angleInDegrees)
        {
            double angleInRadians = angleInDegrees * (Math.PI / 180.0);
            return Math.Cos(angleInRadians);
        }

        [HttpGet]
        [Route("api/math/tangent")]
        [EnableCors("AllowOrigin")]
        public double Tangent(double angleInDegrees)
        {
            double angleInRadians = angleInDegrees * (Math.PI / 180.0);
            return Math.Tan(angleInRadians);
        }
        [HttpGet]
        [Route("api/math/cotangent")]
        [EnableCors("AllowOrigin")]
        public double Cotangent(double angleInDegrees)
        {
            double angleInRadians = angleInDegrees * (Math.PI / 180.0);
            return 1 / Math.Tan(angleInRadians);
        }

        [HttpGet]
        [Route("api/math/cosecant")]
        [EnableCors("AllowOrigin")]
        public double Cosecant(double angleInDegrees)
        {
            double angleInRadians = angleInDegrees * (Math.PI / 180.0);
            return 1 / Math.Sin(angleInRadians);
        }

        [HttpGet]
        [Route("api/math/secant")]
        [EnableCors("AllowOrigin")]
        public double Secant(double angleInDegrees)
        {
            double angleInRadians = angleInDegrees * (Math.PI / 180.0);
            return 1 / Math.Cos(angleInRadians);
        }

        [HttpGet]
        [Route("api/math/sinh")]
        [EnableCors("AllowOrigin")]
        public double Sinh(double x)
        {
            return Math.Sinh(x);
        }

        [HttpGet]
        [Route("api/math/cosh")]
        [EnableCors("AllowOrigin")]
        public double Cosh(double x)
        {
            return Math.Cosh(x);
        }

        [HttpGet]
        [Route("api/math/tanh")]
        [EnableCors("AllowOrigin")]
        public double Tanh(double x)
        {
            return Math.Tanh(x);
        }
        [HttpGet]
        [Route("api/math/percentage")]
        [EnableCors("AllowOrigin")]
        public double Percentage(double value, double percentage)
        {
            return (value * percentage) / 100.0;
        }

        [HttpGet]
        [Route("api/math/square")]
        [EnableCors("AllowOrigin")]
        public double Square(double num)
        {
            return num * num;
        }

        [HttpGet]
        [Route("api/math/cube")]
        [EnableCors("AllowOrigin")]
        public double Cube(double num)
        {
            return num * num * num;
        }

        [HttpGet]
        [Route("api/math/cube-root")]
        [EnableCors("AllowOrigin")]
        public double CubeRoot(double num)
        {
            return Math.Pow(num, 1.0 / 3.0);
        }

        [HttpGet]
        [Route("api/math/power")]
        [EnableCors("AllowOrigin")]
        public double Power(double baseValue, double exponent)
        {
            return Math.Pow(baseValue, exponent);
        }

        [HttpGet]
        [Route("api/math/negative-power")]
        [EnableCors("AllowOrigin")]
        public double NegativePower(double baseValue, double exponent)
        {
            if (baseValue == 0 && exponent <= 0)
            {
                throw new ArgumentException("0 to the power of a non-positive number is undefined.");
            }
            return 1.0 / Math.Pow(baseValue, exponent);
        }
        [HttpGet]
        [Route("api/math/ten-power")]
        [EnableCors("AllowOrigin")]
        public double TenPower(double x)
        {
            return Math.Pow(10, x);
        }
        [HttpGet]
        [Route("api/math/log")]
        [EnableCors("AllowOrigin")]
        public double Log(double x)
        {
            if (x <= 0)
            {
                throw new ArgumentException("Logarithm of a non-positive number is undefined.");
            }
            return Math.Log10(x);
        }

        [HttpGet]
        [Route("api/math/ln")]
        [EnableCors("AllowOrigin")]
        public double Ln(double x)
        {
            if (x <= 0)
            {
                throw new ArgumentException("Natural logarithm of a non-positive number is undefined.");
            }
            return Math.Log(x);
        }

        [HttpGet]
        [Route("api/math/fact")]
        [EnableCors("AllowOrigin")]
        public float CalculateFactorial(float num)
        {
            if (num < 0)
            {
                // Factorial is not defined for negative numbers
                throw new ArgumentException("Factorial is not defined for negative numbers.");
            }

            float factorial = 1;
            for (int i = 1; i <= num; i++)
            {
                factorial *= i;
            }

            return factorial;
        }

//for sip..new addition to final code

         [HttpGet]
         [Route("api/math/sip")]
         [EnableCors("AllowOrigin")]
         public float  CalculateReturns(float principal, int durationInMonths, float  annualInterestRate)
         {
             double monthlyInterestRate = annualInterestRate / 12 / 100;
             int totalMonths = durationInMonths;
             float futureValue = principal;
        
             for (int i = 0; i < totalMonths; i++)
             {
                 futureValue += futureValue * (float)monthlyInterestRate;
             }
        
             return futureValue;
         }

//for lumpsum..new addition to final code

             [HttpGet]
             [Route("api/math/lumpsum")]
             public float CalculateReturns(float principal, float annualInterestRate)
             {
                 double monthlyInterestRate = annualInterestRate / 12 / 100;
                 float futureValue = principal;
            
                 // Assuming a one-time investment, so the duration is 1 month
                 futureValue += futureValue * (float)monthlyInterestRate;
            
                 return futureValue;
             }


    }
}

startup.cs

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CalDemo1
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {

            services.AddControllers();
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "CalDemo1", Version = "v1" });
            });
// Added portion start....................
            services.AddCors(c =>
            {
                c.AddPolicy("AllowOrigin",
                    options =>
                        options.AllowAnyOrigin()
                        .AllowAnyHeader()
                         .AllowAnyMethod());
            });
// Added portion end....................
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "CalDemo1 v1"));
            }
            app.UseRouting();
// Added portion start....................
            app.UseCors(x => x
.AllowAnyOrigin()
.AllowAnyMethod()
.AllowAnyHeader());

// Added portion end....................
            app.UseHttpsRedirection();



            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}


