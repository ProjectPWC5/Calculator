HTML
 <div class="calculator">
  <input type="text" id="screen" maxlength="20">
  <div class="calc-buttons">

<div class="functions-one">
<button class="button triggers">C</button>
<button class="button basic-stuff">(</button>
<button class="button basic-stuff">)</button>
<button class="button numbers">7</button>
<button class="button numbers">8</button>
<button class="button numbers">9</button>
<button class="button numbers">4</button>
<button class="button numbers">5</button>
<button class="button numbers">6</button>
<button class="button numbers">1</button>
<button class="button numbers">2</button>
<button class="button numbers">3</button>
<button class="button basic-stuff">±</button>
<button class="button numbers">0</button>
<button class="button basic-stuff">.</button>
</div>

<div class="functions-two">
<button class="button triggers"><=</button>
<button class="button complex-stuff">%</button>
<button class="button complex-stuff">x !</button>
<button class="button complex-stuff">x^</button>
<button class="button basic-stuff">*</button>
<button class="button basic-stuff">/</button>
<button class="button complex-stuff">ln</button>
<button class="button complex-stuff">e</button>
<button class="button basic-stuff">+</button>
<button class="button complex-stuff">x ²</button>
<button class="button complex-stuff">log</button>
<button class="button complex-stuff">cos</button>
<button class="button basic-stuff">-</button>
<button class="button complex-stuff">√</button>
<button class="button complex-stuff">sin</button>
<button class="button complex-stuff">tan</button>
<button class="button triggers">=</button>
<button class="button complex-stuff">π</button>
<button class="button complex-stuff">∘</button>
<button class="button complex-stuff">rad</button>
</div>
</div>
</div> 


CSS

.calculator {
    max-width: 530px;
    background-color: beige;
    padding: 20px;
    border-radius: 10px;
    margin: 10px auto;
    }
    input[type=text] {
    width: 315px;
        height: 25px;
        border-radius: 5px;
        border: 0px;
        background-color: #333333;
        color: #d9d9d9;
        padding: 0 5px 0 5px;
        margin: 0 0px 10px 84px;
    
    }
    .calc-buttons {
        display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    
    }
    .button {
       margin: 3px;
    width: 63px;
    border: none;
    height: 25px;
    border-radius: 4px;
    color: #000000;
    cursor: pointer;
    }
    button:hover {
      background-color: hsla(180, 100%, 40%, 0.3);
      transition: .2s;
    }
    .functions-one {
        width: 210px;
        display: flex;
        flex-wrap: wrap;
        justify-content: space-evenly;
    }
    
    .functions-two {
    width: 280px;
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
    }
    .triggers {
        background-color: #ffc266;
    }
    .numbers {
        background-color: #999999;
    }
    .basic-stuff {
        background-color: #80d4ff;
    }
    
    .complex-stuff {
        background-color: #80ffff;
    }


//Typescript

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  display: string = '';

  ngOnInit() {
    const buttons = document.getElementsByClassName("button");

    Array.prototype.forEach.call(buttons, (button: HTMLButtonElement) => {
      button.addEventListener("click", () => {
        if (button.textContent !== "=" &&
            button.textContent !== "C" &&
            button.textContent !== "x" &&
            button.textContent !== "÷" &&
            button.textContent !== "√" &&
            button.textContent !== "x ²" &&
            button.textContent !== "%" &&
            button.textContent !== "<=" &&
            button.textContent !== "±" &&
            button.textContent !== "sin" &&
            button.textContent !== "cos" &&
            button.textContent !== "tan" &&
            button.textContent !== "log" &&
            button.textContent !== "ln" &&
            button.textContent !== "x^" &&
            button.textContent !== "x !" &&
            button.textContent !== "π" &&
            button.textContent !== "e" &&
            button.textContent !== "rad" &&
            button.textContent !== "∘") {
          this.display += button.textContent;
        } else if (button.textContent === "=") {
          this.equals();
        } else if (button.textContent === "C") {
          this.clear();
        } else if (button.textContent === "x") {
          this.multiply();
        } else if (button.textContent === "÷") {
          this.divide();
        } else if (button.textContent === "±") {
          this.plusMinus();
        } else if (button.textContent === "<=") {
          this.backspace();
        } else if (button.textContent === "%") {
          this.percent();
        } else if (button.textContent === "π") {
          this.pi();
        } else if (button.textContent === "x ²") {
          this.square();
        } else if (button.textContent === "√") {
          this.squareRoot();
        } else if (button.textContent === "sin") {
          this.sin();
        } else if (button.textContent === "cos") {
          this.cos();
        } else if (button.textContent === "tan") {
          this.tan();
        } else if (button.textContent === "log") {
          this.log();
        } else if (button.textContent === "ln") {
          this.ln();
        } else if (button.textContent === "x^") {
          this.exponent();
        } else if (button.textContent === "x !") {
          this.factorial();
        } else if (button.textContent === "e") {
          this.exp();
        } else if (button.textContent === "rad") {
          this.radians();
        } else if (button.textContent === "∘") {
          this.degrees();
        }
      });
    });
  }

  syntaxError() {
    if (this.display === "Syntax Error") {
      this.display = '';
    }
  }

  equals() {
    if (this.display.includes("^")) {
      const parts = this.display.split("^");
      if (parts.length === 2) {
        const base = parseFloat(parts[0]);
        const exponent = parseFloat(parts[1]);
        if (!isNaN(base) && !isNaN(exponent)) {
          this.display = Math.pow(base, exponent).toString();
        }
      }
    } else {
      try {
        const result = eval(this.display);
        if (typeof result === 'number') {
          this.display = result.toString();
        } else {
          this.syntaxError();
          this.display = 'Syntax Error';
        }
      } catch (error) {
        this.syntaxError();
        this.display = 'Syntax Error';
      }
    }
  }

  clear() {
    this.display = '';
  }

  backspace() {
    this.display = this.display.slice(0, -1);
  }

  multiply() {
    this.display += "*";
  }

  divide() {
    this.display += "/";
  }

  plusMinus() {
    if (this.display.charAt(0) === '-') {
      this.display = this.display.slice(1);
    } else {
      this.display = "-" + this.display;
    }
  }

  factorial() {
    const num = parseInt(this.display);
    if (!isNaN(num)) {
      if (num === 0) {
        this.display = '1';
      } else if (num < 0) {
        this.display = 'undefined';
      } else {
        let result = 1;
        for (let i = 1; i <= num; i++) {
          result *= i;
        }
        this.display = result.toString();
      }
    }
  }

  pi() {
    this.display = (parseFloat(this.display) * Math.PI).toString();
  }

  square() {
    const num = parseFloat(this.display);
    if (!isNaN(num)) {
      this.display = (num * num).toString();
    }
  }

  squareRoot() {
    const num = parseFloat(this.display);
    if (!isNaN(num) && num >= 0) {
      this.display = Math.sqrt(num).toString();
    } else {
      this.syntaxError();
      this.display = 'Syntax Error';
    }
  }

  percent() {
    const num = parseFloat(this.display);
    if (!isNaN(num)) {
      this.display = (num / 100).toString();
    }
  }

  sin() {
    const num = parseFloat(this.display);
    if (!isNaN(num)) {
      this.display = Math.sin(num).toString();
    }
  }

  cos() {
    const num = parseFloat(this.display);
    if (!isNaN(num)) {
      this.display = Math.cos(num).toString();
    }
  }

  tan() {
    const num = parseFloat(this.display);
    if (!isNaN(num)) {
      this.display = Math.tan(num).toString();
    }
  }

  log() {
    const num = parseFloat(this.display);
    if (!isNaN(num) && num > 0) {
      this.display = Math.log10(num).toString();
    } else {
      this.syntaxError();
      this.display = 'Syntax Error';
    }
  }

  ln() {
    const num = parseFloat(this.display);
    if (!isNaN(num) && num > 0) {
      this.display = Math.log(num).toString();
    } else {
      this.syntaxError();
      this.display = 'Syntax Error';
    }
  }

  exponent() {
    this.display += "^";
  }

  exp() {
    const num = parseFloat(this.display);
    if (!isNaN(num)) {
      this.display = Math.exp(num).toString();
    }
  }

  radians() {
    const num = parseFloat(this.display);
    if (!isNaN(num)) {
      this.display = (num * (Math.PI / 180)).toString();
    }
  }

  degrees() {
    const num = parseFloat(this.display);
    if (!isNaN(num)) {
      this.display = (num * (180 / Math.PI)).toString();
    }
  }
}


